tosca_definitions_version: tosca_simple_yaml_1_0
description: >
    This TOSCA simple profile deploys nodejs, mongodb, elasticsearch, logstash and
    kibana each on a separate server with monitoring enabled for nodejs server where a
    sample nodejs application is running. The syslog and collectd are installed on a
    nodejs server.
imports:
    - paypalpizzastore_nodejs_app.yaml
    - elasticsearch.yaml
    - logstash.yaml
    - kibana.yaml
    - collectd.yaml
    - rsyslog.yaml
dsl_definitions:
    host_capabilities: &host_capabilities
        # container properties (flavor)
        disk_size: 10 GB
        num_cpus: { get_input: my_cpus }
        mem_size: 4096 MB
    os_capabilities: &os_capabilities
        architecture: x86_64
        type: Linux
        distribution: Ubuntu
        version: 14.04
topology_template:
    inputs:
        my_cpus:
            type: integer
            description: Number of CPUs for the server.
            constraints:
                - valid_values: [ 1, 2, 4, 8 ]
        github_url:
            type: string
            description: The URL to download nodejs.
            default: https://github.com/sample.git
    node_templates:
        NodejsHost:
            type: tosca.nodes.Compute
            requirements:
                - network:
                    node: Network
                    capability: tosca.capabilities.Connectivity
                    relationship: tosca.relationships.Network
            capabilities:
                os:
                properties:
                    architecture: x86_64
                    type: linux
        Nodejs:
            type: tosca.nodes.Nodejs
            requirements:
                - host: NodejsHost
        Nodecellar:
            type: tosca.nodes.Nodecellar
            properties:
                port: { get_input: nocecellar_port }
            requirements:
                - host: Nodejs
                - database:
                    node: mongo_db
                    capability: tosca.capabilities.endpoint.Mongo
                    relationship: tosca.relationships.NodejsConnectToMongo
        mongo_db:
            type: tosca.nodes.Database
            requirements:
                - host: mongo_dbms
            interfaces:
                Standard:
                    create: create_database.sh
        mongo_dbms:
            type: tosca.nodes.DBMS
            requirements:
                - host: mongo_server
            interfaces:
                tosca.interfaces.node.lifecycle.Standard:
                    create: scripts/mongodb/create.sh
                    configure:
                        implementation: scripts/mongodb/config.sh
                        inputs:
                            mongodb_ip: { get_attribute: [mongo_server, ip_address] }
                    start: scripts/mongodb/start.sh
        elasticsearch:
            type: tosca.nodes.SoftwareComponent.Elasticsearch
            requirements:
                - host: elasticsearch_server
            interfaces:
                tosca.interfaces.node.lifecycle.Standard:
                    create: scripts/elasticsearch/create.sh
                    start: scripts/elasticsearch/start.sh
        logstash:
            type: tosca.nodes.SoftwareComponent.Logstash
            requirements:
                - host: logstash_server
                - search_endpoint: elasticsearch
            interfaces:
                tosca.interfaces.relationship.Configure:
                    pre_configure_source:
                        implementation: python/logstash/configure_elasticsearch.py
                        input:
                            elasticsearch_ip: { get_attribute: [elasticsearch_server, ip_address] }
                tosca.interfaces.node.lifecycle.Standard:
                    create: scripts/lostash/create.sh
                    configure: scripts/logstash/config.sh
                    start: scripts/logstash/start.sh
        kibana:
            type: tosca.nodes.SoftwareComponent.Kibana
            requirements:
                - host: kibana_server
                - search_endpoint: elasticsearch
            interfaces:
                tosca.interfaces.node.lifecycle.Standard:
                    create: scripts/kibana/create.sh
                    configure:
                        implementation: scripts/kibana/config.sh
                        input:
                            elasticsearch_ip: { get_attribute: [elasticsearch_server, ip_address]}
                            kibana_ip: { get_attribute: [kibana_server, ip_address] }
                    start: scripts/kibana/start.sh
        app_collectd:
            type: tosca.nodes.SoftwareComponent.Collectd
            requirements:
                - host: app_server
                - collectd_endpoint: logstash
            interfaces:
                tosca.interfaces.relationship.Configure:
                    pre_configure_target:
                        implementation: python/logstash/configure_collectd.py
            interfaces:
                tosca.interfaces.node.lifecycle.Standard:
                    create: scripts/collectd/create.sh
                    configure:
                        implementation: python/collectd/config.py
                        input:
                            logstash_ip: { get_attribute: [logstash_server, ip_address] }
                    start: scripts/collectd/start.sh
        app_rsyslog:
            type: tosca.nodes.SoftwareComponent.Rsyslog
            requirements:
                - host: app_server
                - rsyslog_endpoint: logstash
            interfaces:
                tosca.interfaces.relationship.Configure:
                    pre_configure_target:
                        implementation: python/logstash/configure_rsyslog.py
            interfaces:
                tosca.interfaces.node.lifecycle.Standard:
                    create: scripts/rsyslog/create.sh
                    configure:
                        implementation: scripts/rsyslog/config.sh
                        input:
                            logstash_ip: { get_attribute: [logstash_server, ip_address] }
                    start: scripts/rsyslog/start.sh
        app_server:
            type: tosca.nodes.Compute
            capabilities:
                host:
                    properties: *host_capabilities
                os:
                    properties: *os_capabilities
        mongo_server:
            type: tosca.nodes.Compute
            capabilities:
                host:
                    properties: *host_capabilities
                os:
                    properties: *os_capabilities
        elasticsearch_server:
            type: tosca.nodes.Compute
            capabilities:
                host:
                    properties: *host_capabilities
                os:
                    properties: *os_capabilities
        logstash_server:
            type: tosca.nodes.Compute
            capabilities:
                host:
                    properties: *host_capabilities
            os:
                properties: *os_capabilities
        kibana_server:
            type: tosca.nodes.Compute
            capabilities:
                host:
                    properties: *host_capabilities
                os:
                    properties: *os_capabilities
    outputs:
        nodejs_url:
            description: URL for the nodejs server.
            value: { get_attribute: [ app_server, private_address ] }
        mongodb_url:
            description: URL for the mongodb server.
            value: { get_attribute: [ mongo_server, private_address ] }
        elasticsearch_url:
            description: URL for the elasticsearch server.
            value: { get_attribute: [ elasticsearch_server, private_address ] }
        logstash_url:
            description: URL for the logstash server.
            value: { get_attribute: [ logstash_server, private_address ] }
        kibana_url:
            description: URL for the kibana server.
            value: { get_attribute: [ kibana_server, private_address ] }